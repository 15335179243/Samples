package com.eyecool.visitorsys.db;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;

import com.eyecool.visitorsys.db.VisitorLog;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "VISITOR_LOG".
*/
public class VisitorLogDao extends AbstractDao<VisitorLog, Long> {

    public static final String TABLENAME = "VISITOR_LOG";

    /**
     * Properties of entity VisitorLog.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property User_id = new Property(1, String.class, "user_id", false, "USER_ID");
        public final static Property Name = new Property(2, String.class, "name", false, "NAME");
        public final static Property Phone = new Property(3, String.class, "phone", false, "PHONE");
        public final static Property Visitor_type = new Property(4, String.class, "visitor_type", false, "VISITOR_TYPE");
        public final static Property St_class = new Property(5, String.class, "st_class", false, "ST_CLASS");
        public final static Property Match_time = new Property(6, String.class, "match_time", false, "MATCH_TIME");
        public final static Property Match_score = new Property(7, String.class, "match_score", false, "MATCH_SCORE");
        public final static Property Match_img = new Property(8, String.class, "match_img", false, "MATCH_IMG");
        public final static Property Feature_img = new Property(9, String.class, "feature_img", false, "FEATURE_IMG");
        public final static Property Stu_teacher = new Property(10, String.class, "stu_teacher", false, "STU_TEACHER");
        public final static Property Visitor_stu = new Property(11, String.class, "visitor_stu", false, "VISITOR_STU");
        public final static Property Card_id = new Property(12, String.class, "card_id", false, "CARD_ID");
    };


    public VisitorLogDao(DaoConfig config) {
        super(config);
    }
    
    public VisitorLogDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"VISITOR_LOG\" (" + //
                "\"_id\" INTEGER PRIMARY KEY ," + // 0: id
                "\"USER_ID\" TEXT," + // 1: user_id
                "\"NAME\" TEXT," + // 2: name
                "\"PHONE\" TEXT," + // 3: phone
                "\"VISITOR_TYPE\" TEXT," + // 4: visitor_type
                "\"ST_CLASS\" TEXT," + // 5: st_class
                "\"MATCH_TIME\" TEXT," + // 6: match_time
                "\"MATCH_SCORE\" TEXT," + // 7: match_score
                "\"MATCH_IMG\" TEXT," + // 8: match_img
                "\"FEATURE_IMG\" TEXT," + // 9: feature_img
                "\"STU_TEACHER\" TEXT," + // 10: stu_teacher
                "\"VISITOR_STU\" TEXT," + // 11: visitor_stu
                "\"CARD_ID\" TEXT);"); // 12: card_id
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"VISITOR_LOG\"";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, VisitorLog entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String user_id = entity.getUser_id();
        if (user_id != null) {
            stmt.bindString(2, user_id);
        }
 
        String name = entity.getName();
        if (name != null) {
            stmt.bindString(3, name);
        }
 
        String phone = entity.getPhone();
        if (phone != null) {
            stmt.bindString(4, phone);
        }
 
        String visitor_type = entity.getVisitor_type();
        if (visitor_type != null) {
            stmt.bindString(5, visitor_type);
        }
 
        String st_class = entity.getSt_class();
        if (st_class != null) {
            stmt.bindString(6, st_class);
        }
 
        String match_time = entity.getMatch_time();
        if (match_time != null) {
            stmt.bindString(7, match_time);
        }
 
        String match_score = entity.getMatch_score();
        if (match_score != null) {
            stmt.bindString(8, match_score);
        }
 
        String match_img = entity.getMatch_img();
        if (match_img != null) {
            stmt.bindString(9, match_img);
        }
 
        String feature_img = entity.getFeature_img();
        if (feature_img != null) {
            stmt.bindString(10, feature_img);
        }
 
        String stu_teacher = entity.getStu_teacher();
        if (stu_teacher != null) {
            stmt.bindString(11, stu_teacher);
        }
 
        String visitor_stu = entity.getVisitor_stu();
        if (visitor_stu != null) {
            stmt.bindString(12, visitor_stu);
        }
 
        String card_id = entity.getCard_id();
        if (card_id != null) {
            stmt.bindString(13, card_id);
        }
    }

    /** @inheritdoc */
    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    /** @inheritdoc */
    @Override
    public VisitorLog readEntity(Cursor cursor, int offset) {
        VisitorLog entity = new VisitorLog( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // user_id
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // name
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // phone
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // visitor_type
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // st_class
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // match_time
            cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7), // match_score
            cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8), // match_img
            cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9), // feature_img
            cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10), // stu_teacher
            cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11), // visitor_stu
            cursor.isNull(offset + 12) ? null : cursor.getString(offset + 12) // card_id
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, VisitorLog entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setUser_id(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setName(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setPhone(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setVisitor_type(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setSt_class(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setMatch_time(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setMatch_score(cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7));
        entity.setMatch_img(cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8));
        entity.setFeature_img(cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9));
        entity.setStu_teacher(cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10));
        entity.setVisitor_stu(cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11));
        entity.setCard_id(cursor.isNull(offset + 12) ? null : cursor.getString(offset + 12));
     }
    
    /** @inheritdoc */
    @Override
    protected Long updateKeyAfterInsert(VisitorLog entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    /** @inheritdoc */
    @Override
    public Long getKey(VisitorLog entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
}
